{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/footer.js","webpack:///./src/components/seo.js"],"names":["NotFoundPage","homeName","_public_static_d_476158712_json__WEBPACK_IMPORTED_MODULE_0__","data","site","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","style","backgroundColor","backgroundImage","backgroundRepeat","backgroundSize","background","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","id","color","opacity","border","borderRadius","padding","_components_footer__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json","Footer","author","name","react__WEBPACK_IMPORTED_MODULE_3___default","href","Date","getFullYear","defaultProps","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","concat"],"mappings":"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","file":"component---src-pages-404-js-1c6fdef783b7dbd6d4fd.js","sourcesContent":["import React from 'react';\nimport { graphql, useStaticQuery, Link } from 'gatsby';\nimport Footer from '../components/footer';\nimport SEO from '../components/seo';\nconst cover = `https://solarsystem.nasa.gov/system/downloadable_items/862_PIA21590.jpg`;\n\nconst NotFoundPage = () => {\n  const data = useStaticQuery(graphql`\n    query getHomeName404 {\n      site {\n        siteMetadata {\n          homeName\n        }\n      }\n    }\n  `);\n  const { homeName } = data.site.siteMetadata;\n  return (\n    <div className={'error-template'}>\n      <SEO title=\"404: Not found\" />\n      <div\n        className={'site-wrapper'}\n        style={{\n          backgroundColor: `#000`,\n          backgroundImage: `url(${cover})`,\n          backgroundRepeat: `no-repeat`,\n          backgroundSize: `contain`,\n        }}\n      >\n        <header\n          className={'site-header outer no-cover'}\n          style={{ background: `transparent` }}\n        >\n          <div className={'inner'}>\n            <nav className={'site-nav-center'}>\n              <Link to={'/'} className={'site-nav-logo'}>\n                {homeName}\n              </Link>\n            </nav>\n          </div>\n        </header>\n        <main id={'site-main'} className={'site-main outer'}>\n          <div className={'inner'}>\n            <section className={'error-message'}>\n              <h1\n                className={'error-code'}\n                style={{\n                  color: `rgb(240, 237, 200)`,\n                  opacity: 0.9,\n                }}\n              >\n                404\n              </h1>\n              <br />\n              <p\n                className={'error-description'}\n                style={{ color: `rgb(240, 237, 200)`, opacity: 0.9 }}\n              >\n                It was quite lonely and cold here, far away from the Sun.\n                <br />\n                Thanks for stopping by!\n              </p>\n              <br />\n              <Link\n                to={'/'}\n                className={'error-link'}\n                style={{\n                  border: `1px solid rgb(240, 237, 200)`,\n                  borderRadius: `20px`,\n                  color: `rgb(240, 237, 200)`,\n                  padding: `9px 16px`,\n                }}\n              >\n                Land on the home page.\n              </Link>\n            </section>\n          </div>\n        </main>\n        <Footer style={{ background: `transparent` }} />\n      </div>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport '../components/layout.css';\n\nconst Footer = ({ author, name, style }) => (\n  <footer className={'site-footer outer'} style={{ ...style }}>\n    <div className={'site-footer-content inner'}>\n      <section className={'copyright'}>\n        <a href={`https://www.twitter.com/${author}`}>{name}</a> ©{' '}\n        {new Date().getFullYear()}\n      </section>\n      <nav className={'site-footer-nav'}>\n        <Link to=\"/\">Latest Posts</Link>\n      </nav>\n    </div>\n  </footer>\n);\n\nFooter.propTypes = {\n  name: PropTypes.string,\n  author: PropTypes.string,\n};\n\nFooter.defaultProps = {\n  name: `Sanā Habeeb`,\n  author: `@SanaHabeeb4`,\n};\n\nexport default Footer;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}