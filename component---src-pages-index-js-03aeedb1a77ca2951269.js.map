{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/footer.js","webpack:///./src/components/seo.js"],"names":["Header","_ref","siteTitle","description","headerImg","hideName","homeName","_855792025","data","site","siteMetadata","react_default","a","createElement","style","backgroundColor","backgroundImage","className","margin","defaultProps","Layout","children","_3480972524","header","title","id","footer","author","name","query","IndexPage","props","edges","allMarkdownRemark","nodes","index","Object","assign","_props$data$site$site","twitterHandle","photo","layout","seo","map","edge","frontmatter","node","publishDate","Date","date","toDateString","cover","key","path","gatsby_browser_entry","to","tags","length","excerpt","href","src","alt","timeToRead","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","Footer","react__WEBPACK_IMPORTED_MODULE_3___default","getFullYear","gatsby__WEBPACK_IMPORTED_MODULE_2__","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","concat"],"mappings":"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","file":"component---src-pages-index-js-03aeedb1a77ca2951269.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nconst Header = ({ siteTitle, description, headerImg, hideName }) => {\n  const data = useStaticQuery(graphql`\n    query getHomeName {\n      site {\n        siteMetadata {\n          homeName\n        }\n      }\n    }\n  `);\n  const { homeName } = data.site.siteMetadata;\n  return (\n    <header\n      style={{\n        backgroundColor: `#86BD26`,\n        backgroundImage: `url(${headerImg})`,\n      }}\n      className={'site-header outer'}\n    >\n      <div className={'inner'}>\n        <div className={'site-header-content'}>\n          <h1 style={{ margin: 0 }} className={'site-title'}>\n            {siteTitle}\n          </h1>\n          <br />\n          <h2 className={'site-description'}>{description}</h2>\n          {!hideName && <h2>{homeName}</h2>}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n  description: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: `Sanaa’s stories`,\n  description: `Hi, I am Sanā!`,\n};\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Header from './header';\nimport Footer from './footer';\n\nconst Layout = ({ children }) => {\n  const { site } = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          author\n          description\n          headerImg\n          name\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <div className={'home-template'}>\n      <div className={'site-wrapper'}>\n        <Header\n          siteTitle={site.siteMetadata.title}\n          description={site.siteMetadata.description}\n          headerImg={site.siteMetadata.headerImg}\n        />\n        <main className={'site-main outer'} id={'site-main'}>\n          {children}\n        </main>\n        <Footer\n          author={site.siteMetadata.author}\n          name={site.siteMetadata.name}\n          className={'site-footer outer'}\n        />\n      </div>\n    </div>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { graphql, Link } from 'gatsby';\n\nexport const query = graphql`\n  query BlogPostList {\n    site {\n      siteMetadata {\n        author\n        name\n        photo\n      }\n    }\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      nodes {\n        timeToRead\n      }\n      edges {\n        node {\n          frontmatter {\n            cover\n            date\n            excerpt\n            path\n            tags\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function IndexPage(props) {\n  const edges = props.data.allMarkdownRemark.edges;\n  const nodes = props.data.allMarkdownRemark.nodes;\n  for (let index in edges) edges[index] = { ...edges[index], ...nodes[index] };\n  const { author: twitterHandle, name, photo } = props.data.site.siteMetadata;\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className={'inner'}>\n        <div className={'post-feed'}>\n          {edges.map((edge, index) => {\n            const { frontmatter } = edge.node;\n            const publishDate = new Date(frontmatter.date).toDateString();\n            const cover = frontmatter.cover;\n            return (\n              <article className={'post-card'} key={frontmatter.path}>\n                <Link to={frontmatter.path} className={'post-card-image-link'}>\n                  <div\n                    className={'post-card-image'}\n                    style={{\n                      backgroundImage: `url(\"${cover}\")`,\n                    }}\n                  ></div>\n                </Link>\n                <div className={'post-card-content'}>\n                  <Link\n                    to={frontmatter.path}\n                    className={'post-card-content-link'}\n                  >\n                    <header className=\"postCardHeader\">\n                      <span className={'post-card-tags'}>\n                        {frontmatter.tags && frontmatter.tags[0].length\n                          ? frontmatter.tags[0] + ` • `\n                          : ``}{' '}\n                        {publishDate}\n                      </span>\n                      <h2 className={'post-card-title'}>{frontmatter.title}</h2>\n                    </header>\n                    <section className=\"postCardExcerpt\">\n                      <p className={'excerpt'}>\n                        {edges[index].node.frontmatter.excerpt}\n                      </p>\n                    </section>\n                  </Link>\n                  <footer className={'post-card-meta'}>\n                    <ul className={'author-list'}>\n                      <li className={'author-list-item'}>\n                        <div className={'author-name-tooltip'}>{name}</div>\n                        <a\n                          href={`https://www.twitter.com/${twitterHandle}`}\n                          className={'static-avatar'}\n                        >\n                          <img\n                            src={photo}\n                            className={'avatar-wrapper'}\n                            alt={name}\n                          />\n                        </a>\n                      </li>\n                    </ul>\n                    <span className={'reading-time'}>\n                      {edges[index].timeToRead} min read\n                    </span>\n                  </footer>\n                </div>\n              </article>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport '../components/layout.css';\n\nconst Footer = ({ author, name, style }) => (\n  <footer className={'site-footer outer'} style={{ ...style }}>\n    <div className={'site-footer-content inner'}>\n      <section className={'copyright'}>\n        <a href={`https://www.twitter.com/${author}`}>{name}</a> ©{' '}\n        {new Date().getFullYear()}\n      </section>\n      <nav className={'site-footer-nav'}>\n        <Link to=\"/\">Latest Posts</Link>\n      </nav>\n    </div>\n  </footer>\n);\n\nFooter.propTypes = {\n  name: PropTypes.string,\n  author: PropTypes.string,\n};\n\nFooter.defaultProps = {\n  name: `Sanā Habeeb`,\n  author: `@SanaHabeeb4`,\n};\n\nexport default Footer;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}