{"version":3,"sources":["webpack:///./src/templates/blogPost.js","webpack:///./src/components/tinyHeader.js"],"names":["BlogPostTemplate","componentDidMount","d","s","this","props","pageContext","pathSlug","document","createElement","src","setAttribute","Date","head","body","appendChild","render","data","twitterHandle","author","cover","date","description","name","next","photo","prev","tempTags","tags","newTags","length","tag","shift","toLowerCase","push","to","style","textTransform","key","title","markdownRemark","frontmatter","html","className","id","dateTime","toDateString","backgroundImage","dangerouslySetInnerHTML","__html","href","alt","AuthorCardContent","ReadMore","path","moment","fromNow","excerpt","React","Component","query","TinyHeader","site","siteMetadata","homeName","siteUrl","role","rel","target","xmlns","viewBox","cx","cy","r"],"mappings":"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","file":"component---src-templates-blog-post-js-aaf6cc7153ed3759cda4.js","sourcesContent":["import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Footer from '../components/footer';\nimport TinyHeader from '../components/tinyHeader';\nimport moment from 'moment';\n\nclass BlogPostTemplate extends React.Component {\n  componentDidMount() {\n    const pathSlug = this.props.pageContext.pathSlug;\n    var disqus_config = function() {\n      this.page.url = 'https://sana137.in';\n      this.page.identifier = { pathSlug };\n    };\n    (function() {\n      // DON'T EDIT BELOW THIS LINE\n      var d = document,\n        s = d.createElement('script');\n      s.src = 'https://sana137.disqus.com/embed.js';\n      s.setAttribute('data-timestamp', +new Date());\n      (d.head || d.body).appendChild(s);\n    })();\n    if (disqus_config); // only to avoid warning 'disqus_thread' was never used.\n  }\n  render() {\n    const { data, pageContext } = this.props;\n    const {\n      author: twitterHandle,\n      cover,\n      date,\n      description,\n      name,\n      next,\n      photo,\n      prev,\n      tags,\n    } = pageContext;\n    const tempTags = [...tags];\n    const newTags = [];\n    while (tempTags.length > 1) {\n      let tag = tempTags.shift().toLowerCase();\n      newTags.push(\n        <Link\n          to={`/tags/${tag}`}\n          style={{ textTransform: `capitalize` }}\n          key={tag}\n        >\n          {tag}\n        </Link>\n      );\n      newTags.push(' • ');\n    }\n    let tag = tempTags.shift().toLowerCase();\n    newTags.push(\n      <Link\n        to={`/tags/${tag}`}\n        style={{ textTransform: `capitalize` }}\n        key={tag}\n      >\n        {tag}\n      </Link>\n    );\n    const title = data.markdownRemark.frontmatter.title;\n    const html = data.markdownRemark.html;\n    return (\n      <div className={'post-template'}>\n        <div className={'site-wrapper'}>\n          <TinyHeader />\n          <main id={'site-main'} className={'site-main outer'}>\n            <div className={'inner'}>\n              <article className={'post-full post'}>\n                <header className={'post-full-header'}>\n                  <section className={'post-full-meta'}>\n                    <time className={'post-full-meta-date'} dateTime={date}>\n                      {new Date(date).toDateString()}\n                    </time>\n                  </section>\n                  <h1 className={'post-full-title'}>{title}</h1>\n                  <span>{newTags}</span>\n                </header>\n                {cover && (\n                  <figure\n                    className={'post-full-image'}\n                    style={{ backgroundImage: `url(${cover})` }}\n                  />\n                )}\n                <section className={'post-full-content'}>\n                  <div\n                    className={'post-content'}\n                    dangerouslySetInnerHTML={{ __html: html }}\n                  />\n                </section>\n                <footer className={'post-full-footer'}>\n                  <section className={'author-card'}>\n                    <a\n                      href={`https://www.twitter.com/${twitterHandle}`}\n                      className={'author-profile-image'}\n                    >\n                      <img\n                        src={photo}\n                        className={'avatar-wrapper'}\n                        alt={name}\n                      />\n                    </a>\n                    <AuthorCardContent name={name} description={description} />\n                  </section>\n                  <ReadMore />\n                </footer>\n                <section className={'post-full-comments'}>\n                  <div id=\"disqus_thread\"></div>\n                </section>\n              </article>\n            </div>\n          </main>\n          <aside className={'read-next outer'}>\n            <div className={'inner'}>\n              <div className={'read-next-feed'}>\n                {next && (\n                  <article className={'post-card post'}>\n                    <Link\n                      className={'post-card-image-link'}\n                      to={next.frontmatter.path}\n                    >\n                      <div\n                        className={'post-card-image'}\n                        style={{\n                          backgroundImage: `url(${next.frontmatter.cover})`,\n                        }}\n                      />\n                    </Link>\n                    <div className={'post-card-content'}>\n                      <Link\n                        className={'post-card-content-link'}\n                        to={next.frontmatter.path}\n                      >\n                        <header className={'post-card-header'}>\n                          <span className={'post-card-tags'}>\n                            {next.frontmatter.tags\n                              ? next.frontmatter.tags[0] + ' • '\n                              : ''}\n                            {moment(next.frontmatter.date).fromNow()}\n                          </span>\n                          <h2 className={'post-card-title'}>\n                            {next.frontmatter.title}\n                          </h2>\n                        </header>\n                        <section className={'post-card-excerpt'}>\n                          <p>{next.frontmatter.excerpt}</p>\n                        </section>\n                      </Link>\n                    </div>\n                  </article>\n                )}\n                {prev && (\n                  <article className={'post-card post'}>\n                    <Link\n                      className={'post-card-image-link'}\n                      to={prev.frontmatter.path}\n                    >\n                      <div\n                        className={'post-card-image'}\n                        style={{\n                          backgroundImage: `url(${prev.frontmatter.cover})`,\n                        }}\n                      />\n                    </Link>\n                    <div className={'post-card-content'}>\n                      <Link\n                        className={'post-card-content-link'}\n                        to={prev.frontmatter.path}\n                      >\n                        <header className={'post-card-header'}>\n                          <span className={'post-card-tags'}>\n                            {prev.frontmatter.tags\n                              ? prev.frontmatter.tags[0] + ' • '\n                              : ''}\n                            {moment(prev.frontmatter.date).fromNow()}\n                          </span>\n                          <h2 className={'post-card-title'}>\n                            {prev.frontmatter.title}\n                          </h2>\n                        </header>\n                        <section className={'post-card-excerpt'}>\n                          <p>{prev.frontmatter.excerpt}</p>\n                        </section>\n                      </Link>\n                    </div>\n                  </article>\n                )}\n              </div>\n            </div>\n          </aside>\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\nexport const query = graphql`\n  query($pathSlug: String!) {\n    markdownRemark(frontmatter: { path: { eq: $pathSlug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport default BlogPostTemplate;\n\nconst ReadMore = () => (\n  <div className={'post-full-footer-right'}>\n    <Link to={'/'} className={'author-card-button'}>\n      Read More\n    </Link>\n  </div>\n);\n\nconst AuthorCardContent = ({ name, description }) => (\n  <section className={'author-card-content'}>\n    <h4 className={'author-card-name'}>{name}</h4>\n    <p>{description}</p>\n  </section>\n);\n","import React from 'react';\nimport { graphql, useStaticQuery, Link } from 'gatsby';\n\nconst TinyHeader = () => {\n  const data = useStaticQuery(graphql`\n    query getSiteUrl {\n      site {\n        siteMetadata {\n          homeName\n          siteUrl\n        }\n      }\n    }\n  `);\n  const { homeName, siteUrl } = data.site.siteMetadata;\n  return (\n    <header className={'site-header outer'}>\n      <div className={'inner'}>\n        <nav className={'site-nav'}>\n          <div className={'site-nav-left'}>\n            <Link to={'/'} className={'site-nav-logo'}>\n              {homeName}\n            </Link>\n            <ul className=\"nav\" role=\"menu\">\n              <li className=\"nav-weblog\" role=\"menuitem\">\n                <Link to={'/tags'} style={{ textTransform: `upper` }}>\n                  #tags\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div className={'site-nav-right'}>\n            <div className={'social-links'}>\n              <a\n                className={'rss-button'}\n                href={`https://feedly.com/i/subscription/feed/${siteUrl}/rss.xml`}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                title=\"RSS\"\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                  <circle cx=\"6.18\" cy=\"17.82\" r=\"2.18\"></circle>\n                  <path d=\"M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z\"></path>\n                </svg>\n              </a>\n            </div>\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default TinyHeader;\n"],"sourceRoot":""}